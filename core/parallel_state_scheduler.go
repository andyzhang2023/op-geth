package core

import (
	"runtime"
	"sync"

	"github.com/ethereum/go-ethereum/core/types"
)

var runner chan func()

func init() {
	for i := 0; i < runtime.NumCPU(); i++ {
		go func() {
			for f := range runner {
				f()
			}
		}()
	}
}

// TxLevel contains all transactions who are independent to each other
type TxLevel []*ParallelTxRequest

// TxLevels indicates the levels of transactions
// the levels are ordered by the dependencies, and generated by the TxDAG
type TxLevels []TxLevel

// run runs the transactions in parallel
func (tls TxLevels) run(execute func(*ParallelTxRequest) *ParallelTxResult, confirm func(*ParallelTxResult) error) {
	for _, txLevel := range tls {
		wait := sync.WaitGroup{}
		wait.Add(len(txLevel))
		toConfirm := make(chan *ParallelTxResult)
		go func() {
			for _, tx := range txLevel {
				// execute the transactions in parallel
				runner <- func() {
					toConfirm <- execute(tx)
				}
			}
		}()
		go func() {
			for res := range toConfirm {
				if err := confirm(res); err != nil {
					// rerun the transaction
					runner <- func() {
						toConfirm <- execute(res.txReq)
					}
					continue
				}
				//confirm the transaction result
				wait.Done()
			}
		}()
		wait.Wait()
		close(toConfirm)
	}
}

func NewTxLevels(all []*ParallelTxRequest, dag types.TxDAG) TxLevels {
	return nil
}
